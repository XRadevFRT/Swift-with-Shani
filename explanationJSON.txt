The best explanation of JSON I've come across!!
http://www.atimi.com/simple-json-parsing-swift-2/

Here is an example of a contact record for Johnny Appleseed:

{ 	
    "type" : "person",
    "first name" : "Johnny",
    "last name" : "Appleseed",
    "nickname" : null,
    "age" : 42, 
    "phone numbers" : [
        {
            "type" : “work",
            "number" : "+1 (555) 555-5555"
        },
        {
            "type" : "home",
            "number" : null
        }
    ],
    "work address" : {
        "line 1" : "1234 5th Avenue",
        "line 2" : null,
	"city" : "Hometown"
    },
    "home address" : null
 }


Whether or not you have seen JSON before, you have probably already figured out the data 
structure: the name and age are simple attributes; the work and home addresses are objects 
(though we don’t have his home address); 
and there is a list of phone numbers, each of which is its own object.

//: Playground - noun: a place where people can play

import Foundation

let airQuality: NSURL = [#FileReference(fileReferenceLiteral: "airquality.json")#]
let data = NSData (contentsOfURL: airQuality)!

/* Introduce error-handling:

do-catch statement to handle errors by running a block of code. If an error is thrown by
 the code in the do clause, it is matched against the catch clauses to determine which one 
 of them can handle the error.

If a catch clause matches any error and binds the error to a local constant named error.

*/
do {
    /* everything surrounded by do/catch block  since  */
    
    /*identify places in your code that can throw errors.  try keyword before a 
    piece of code that calls a function, method, or initializer that can throw an error.*/
    
    let json = try NSJSONSerialization.JSONObjectWithData(data, 
    options: NSJSONReadingOptions.AllowFragments)
    
    /* Attempting to take random_recommendations from the JSON AND cast it to
    dictionary using 'optional binding' */
    
    if let pollutantDescription = (json as! NSDictionary)["dominant_pollutant_description"]
     as? String {
        print(pollutantDescription)
    }
    
/*
Type casting in Swift is implemented with the is and as operators. These two operators 
provide a simple and expressive way to check the type of a value or cast a value to a 
different type.
    
    Because downcasting can fail, the type cast operator comes in two different forms. 
    The conditional form, as?, returns an optional value of the type you are trying to 
    downcast to. The forced form, as!, attempts the downcast and force-unwraps the result 
    as a single compound action.*/
    
    
    if let pollutantText = (json as! NSDictionary)["dominant_pollutant_text"] {
        print(pollutantText)
        if let effects = pollutantText["effects"] as? String {
            print(effects)
        }
    }
    
    
    
  
    /* Swift provides special type aliases for working with non-specific 
    types: AnyObject & Any. AnyObject can represent an instance of any class type.
    
    sometimes you receive an array with a type of [AnyObject], or “an array of 
    values of any object type”.
    
    */
    
    if let airRecommendation = json["random_recommendations"] as? [String:AnyObject] {
        if let children = airRecommendation["children"] as? String {
            print("\(children)")
        }
    }
  
    var printSportRec: String {
    guard let airRecommendation = json["random_recommendations"] as? [String:AnyObject],
        let forSport = airRecommendation["sport"] as? String else {
            return "Error"
    }
    return forSport
     
    }
    print("\(printSportRec)!")
    
    var printHealthRec: String {
        guard let airRecommendation = json["random_recommendations"] as? [String:AnyObject],
            let forHealth = airRecommendation["health"] as? String else {
                return "Error"
        }
        return forHealth
        
    }
    print("\(printHealthRec)!")
    
    
    
    
    
} catch {
    print("error serializing JSON: \(error)")
}

/*
Type casting in Swift is implemented with the is and as operators. These two operators provide a simple and expressive way to check the type of a value or cast a value to a different type.

Use the type check operator (is) to check whether an instance is of a certain subclass type. The type check operator returns true if the instance is of that subclass type and false if it is not.

A constant or variable of a certain class type may actually refer to an instance of a subclass behind the scenes. Where you believe this is the case, you can try to downcast to the subclass type with a type cast operator (as? or as!).

Because downcasting can fail, the type cast operator comes in two different forms. The conditional form, as?, returns an optional value of the type you are trying to downcast to. The forced form, as!, attempts the downcast and force-unwraps the result as a single compound action.

Use the conditional form of the type cast operator (as?) when you are not sure if it'll succeed. This form will always return an optional value, and the value will be nil if the downcast was not possible. This enables you to check for a successful downcast.

Use the forced form of the type cast operator (as!) only when you are sure that the downcast will always succeed. This form of the operator will trigger a runtime error if you try to downcast to an incorrect class type.



*/

